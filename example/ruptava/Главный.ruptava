импортировать java.util.СписокМассива;
импортировать java.util.Список;
импортировать java.util.ХэшКарта;
импортировать java.util.Карта;

импортировать model.ИмяФамилия;
импортировать model.ХимическийЭлемент;

публичный класс Главный {

    приватный статический конечный Список<Строка> ключевыеСтроки = новый СписокМассива<Строка>() {
        {
            добавить("публичный статический пустой 1");
            добавить("публичный статический пустой 2");
            добавить("публичный статический пустой 3");
            добавить("публичный статический пустой 4");
            добавить("публичный статический пустой 5");
        }
    };

    приватный статический конечный целый[][] матрица = {
        {0, 1, 2, 3, 4},
        {1, 2, 3, 4, 5},
        {2, 3, 4, 5, 6},
        {3, 4, 5, 6, 7}
    };

    приватный статический конечный Карта<ИмяФамилия, Логический> журнал = новый ХэшКарта<>();

    статический {
        заполнитьЖурнал();
    }

    /**
     * Альтернатива метода "main" в java.
     */
    публичный статический пустой главный() {
        распечататьСтроки();
        распечататьМатрицу();
        распечататьАтмосферуПланеты();
        проверитьПосещаемость();
    }

    /**
     * Печатает список из строк с ключевыми словами Ruptava.
     */
    приватный статический пустой распечататьСтроки() {
        для (Строка ключ : ключевыеСтроки) {
            системноРаспечататьСтроку(ключ);
        }
    }

    /**
     * Печатает матрицу из целых чисел.
     */
    приватный статический пустой распечататьМатрицу() {
        системноРаспечататьСтроку("");
        для (целый i = 0; i < матрица.длина; i++) {
           для (целый j = 0; j < матрица[i].длина; j++) {
               системноРаспечатать(матрица[i][j] + " ");
           }
           Система.вывод.распечатать("\n");
        }
    }

    /**
     * Печатает атмосферу планеты Земля.
     */
    приватный статический пустой распечататьАтмосферуПланеты() {
        Список<ХимическийЭлемент> атмосфера = получитьАтмосферуПланеты(3);
        системноРаспечататьСтроку("\nАтмосфера планеты \"Земля\" состоит из:");
        для (ХимическийЭлемент химическийЭлемент : атмосфера) {
            Система.вывод.распечататьСтроку(химическийЭлемент.кСтроке());
        }
    }

    /**
     * Определяет атмосферу планеты по значению номерОтСолнца.
     */
    приватный статический Список<ХимическийЭлемент> получитьАтмосферуПланеты(целый номерОтСолнца) {
        Список<ХимическийЭлемент> результат = новый СписокМассива<>();
        когда (номерОтСолнца) {
            случай 1: результат.добавить(новый ХимическийЭлемент("Нет атмосферы", "?"));
                прервать;
            случай 2:
            случай 4: результат.добавить(новый ХимическийЭлемент("Углекислый газ", "CO2"));
                прервать;
            случай 3: результат.добавить(новый ХимическийЭлемент("Углекислый газ", "CO2"));
                результат.добавить(новый ХимическийЭлемент("Азот", "N2"));
                результат.добавить(новый ХимическийЭлемент("Кислород", "O2"));
                прервать;
            случай 5:
            случай 6: результат.добавить(новый ХимическийЭлемент("Водород", "H2"));
                результат.добавить(новый ХимическийЭлемент("Гелий", "He"));
                прервать;
            случай 7:
            случай 8: результат.добавить(новый ХимическийЭлемент("Метан", "CH4"));
                результат.добавить(новый ХимическийЭлемент("Водород", "H2"));
                результат.добавить(новый ХимическийЭлемент("Гелий", "He"));
                прервать;
            стандартный:
                прервать;
        }
        вернуть результат;
    }

    /**
     * Заполняет журнал посещаемости учащихся.
     */
    приватный статический пустой заполнитьЖурнал() {
        журнал.положить(новый ИмяФамилия("Ваня", "Карпов"), правда);
        журнал.положить(новый ИмяФамилия("Женя", "Власов"), ложь);
        журнал.положить(новый ИмяФамилия("Дима", "Сафонов"), правда);
        журнал.положить(новый ИмяФамилия("Петя", "Шаров"), ложь);
        журнал.положить(новый ИмяФамилия("Коля", "Щукин"), правда);
        журнал.положить(новый ИмяФамилия("Лена", "Якушева"), правда);
        журнал.положить(новый ИмяФамилия("Катя", "Шашкова"), ложь);
        журнал.положить(новый ИмяФамилия("Таня", "Рожкова"), правда);
        журнал.положить(новый ИмяФамилия("Галя", "Селезнёва"), ложь);
    }

    /**
     * Проверяет посещаемость учащихся.
     */
    приватный статический пустой проверитьПосещаемость() {
        системноРаспечататьСтроку("\nПроверяем посещаемость:");
        для (Карта.Запись<ИмяФамилия, Логический> запись : журнал.наборЗаписей()) {
            если (запись.получитьЗначение() == правда) {
                Система.вывод.распечататьСтроку(запись.получитьКлюч().кСтроке() + " здесь, молодец!");
            } иначе {
                Система.ошибка.распечататьСтроку(запись.получитьКлюч().кСтроке() + " отсутствует, плохо!");
            }
        }
    }
}
